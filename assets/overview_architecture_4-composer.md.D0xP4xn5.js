import{_ as o,D as r,c as i,I as a,a5 as n,l as e,a as s,o as l}from"./chunks/framework.EN5ALL4V.js";const C=JSON.parse('{"title":"Composer","description":"","frontmatter":{"sidebar_position":4},"headers":[],"relativePath":"overview/architecture/4-composer.md","filePath":"overview/architecture/4-composer.md","lastUpdated":1713206801000}'),c={name:"overview/architecture/4-composer.md"},p=n('<h1 id="composer" tabindex="-1">Composer <a class="header-anchor" href="#composer" aria-label="Permalink to &quot;Composer&quot;">â€‹</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>To deploy your own rollup on the Astria Devnet on your local machine, check out the <a href="/local-rollup/1-introduction">instructions here</a>!</p><p>To deploy your own rollup on the Astria Devnet using Digital Ocean, check out the <a href="/cloud-rollup/digital-ocean">instructions here</a>!</p></div>',2),u=e("p",null,"The Composer is an in-house abstraction over the potential actors in Astria's MEV supply chain. It currently contains a naive implementations of the role a searcher will fulfill, with the intention of having working examples that economically incentivized third parties can use as a starting point for their own implementations. As we progress from design to implementation of Astria's proposer-builder separation it will also include an example implementation of a naive builder. The abstractions serves the goal of acting as a forcing function on our architecture design by stubbing out the roles and requiring other components to interact with them through an interface.",-1),h=e("p",null,"While a real searcher implementation would create profit-generating bundles of rollup transactions and submit them to a builder, the Composer implementation simply bundles every rollup transaction it receives into a sequencer transaction and submits it to the sequencer. As our approach to proposer-builder separation is still in its design phase, there is currently no explicit builder role in the MEV supply chain and transactions are submitted directly to validator nodes' CometBFT mempool.",-1),m=e("p",null,"Once Astria's block builder design moves to its implementation phase, the Composer will include a reference builder implementation as well. Similarly to the searcher, while a real builder implementation would run a profit-generating auction, the composer implementation will simply run a FIFO queue that will add all the sequencer transactions it receives and submits a block to the sequencer's proposer.",-1),d=e("p",null,[s("See the "),e("a",{href:"https://github.com/astriaorg/astria/tree/main/crates/astria-conductor",target:"_blank",rel:"noreferrer"},"Conductor code here.")],-1);function _(f,b,g,v,w,y){const t=r("DeploymentsRedirect");return l(),i("div",null,[p,a(t),u,h,m,d])}const k=o(c,[["render",_]]);export{C as __pageData,k as default};
